package fathertoast.naturalabsorption.common.config;

import fathertoast.naturalabsorption.common.config.field.*;
import fathertoast.naturalabsorption.common.config.file.ToastConfigSpec;
import fathertoast.naturalabsorption.common.config.file.TomlHelper;
import fathertoast.naturalabsorption.common.health.HeartManager;
import fathertoast.naturalabsorption.common.util.EnchantArmorType;
import fathertoast.naturalabsorption.common.util.EnchantmentRarity;
import fathertoast.naturalabsorption.common.util.References;
import net.minecraft.enchantment.ProtectionEnchantment;

import java.io.File;

public class EquipmentConfig extends Config.AbstractConfig {
    
    public final Enchantment ENCHANTMENT;
    public final Armor ARMOR;
    
    /** Builds the config spec that should be used for this config. */
    EquipmentConfig( File dir, String fileName ) {
        super( dir, fileName,
                "This config contains options for features that apply to the Absorption enchantment and armor."
        );
        
        ENCHANTMENT = new Enchantment(SPEC);
        ARMOR = new Armor(SPEC);
    }
    
    public static class Enchantment extends Config.AbstractCategory {
        
        public final BooleanField enabled;
        
        public final EnumField<EnchantArmorType> slot;
        public final BooleanField allowOnBooks;
        public final BooleanField treasureOnly;
        public final EnumField<EnchantmentRarity> rarity;
        
        public final DoubleField potencyBase;
        public final DoubleField potencyPerLevel;
        public final DoubleField potencyMax;
        
        public final IntField levelMax;
        public final BooleanField stacking;
        
        public final IntField costBase;
        public final IntField costPerLevel;
        
        Enchantment( ToastConfigSpec parent ) {
            super( parent, "enchantment",
                    "Options for the Absorption enchantment added by this mod." );
            
            enabled = SPEC.define( new BooleanField( "enabled", true,
                    "Set this to false to disable the Absorption enchantment entirely." ) );
            
            SPEC.newLine();
            
            slot = SPEC.define( new EnumField<>( "slot", EnchantArmorType.ALL,
                    "The slot the Absorption enchantment is normally applicable to. Will still work on any armor piece",
                    "if force-applied (e.g., creative mode anvil)." ) );
            allowOnBooks = SPEC.define( new BooleanField( "allow_on_books", true,
                    "If false, the Absorption enchantment will not be allowed on books." ) );
            treasureOnly = SPEC.define( new BooleanField( "treasure_only", false,
                    "If true, the Absorption enchantment will not be generated by enchanting tables." ) );
            rarity = SPEC.define( new EnumField<>( "rarity", EnchantmentRarity.RARE,
                    "The rarity of the Absorption enchantment. That is, how often it appears when enchanting valid items.",
                    "For reference, here are vanilla protection enchantment rarities:",
                    "  Protection       - " + TomlHelper.toLiteral( EnchantmentRarity.COMMON ),
                    "  Fire Protection  - " + TomlHelper.toLiteral( EnchantmentRarity.UNCOMMON ),
                    "  Feather Falling  - " + TomlHelper.toLiteral( EnchantmentRarity.UNCOMMON ),
                    "  Blast Protection - " + TomlHelper.toLiteral( EnchantmentRarity.RARE ),
                    "  Proj Protection  - " + TomlHelper.toLiteral( EnchantmentRarity.UNCOMMON ) ) );
            
            SPEC.newLine();
            
            potencyBase = SPEC.define( new DoubleField( "potency.base", 2.0, DoubleField.Range.ANY,
                    "Maximum absorption gained for having at least one level of the Absorption enchantment.",
                    "A negative value reduces the effect of the first level(s)." ) );
            potencyPerLevel = SPEC.define( new DoubleField( "potency.per_level", 2.0, DoubleField.Range.NON_NEGATIVE,
                    "Maximum absorption gained for each level of the Absorption enchantment." ) );
            potencyMax = SPEC.define( new DoubleField( "potency.maximum", 20.0, DoubleField.Range.NON_NEGATIVE,
                    "The absolute limit on max absorption that can be gained from Absorption enchantments on a single player." ) );
            
            SPEC.newLine();
            
            levelMax = SPEC.define( new IntField( "level_maximum", 4, IntField.Range.NON_NEGATIVE,
                    "Maximum level for the Absorption enchantment.",
                    "Without messing with cost, it is recommended you only alter this to " + References.PLUS_OR_MINUS +
                            " 1 default max level." ) );
            stacking = SPEC.define( new BooleanField( "stacking", true,
                    "If true, all equipped Absorption enchantments are added together (like vanilla Protection enchants).",
                    "Otherwise, only the highest level Absorption enchantment will be counted." ) );
            
            SPEC.newLine();
            
            costBase = SPEC.define( new IntField( "cost.base", 3, IntField.Range.NON_NEGATIVE,
                    "Base enchantment cost and cost per additional enchantment level.",
                    "Without messing with max level, it is recommended you only alter these within range of vanilla costs.",
                    "For reference, here are vanilla protection enchantment costs:",
                    vanillaCosts( "Protection      ", ProtectionEnchantment.Type.ALL ),
                    vanillaCosts( "Fire Protection ", ProtectionEnchantment.Type.FIRE ),
                    vanillaCosts( "Feather Falling ", ProtectionEnchantment.Type.FALL ),
                    vanillaCosts( "Blast Protection", ProtectionEnchantment.Type.EXPLOSION ),
                    vanillaCosts( "Proj Protection ", ProtectionEnchantment.Type.PROJECTILE ) ) );
            costPerLevel = SPEC.define( new IntField( "cost.per_level", 10, IntField.Range.NON_NEGATIVE ) );
        }
        
        private static String vanillaCosts( String name, ProtectionEnchantment.Type type ) {
            return String.format( "  %s - %2d base + %2d per level", name, type.getMinCost(), type.getLevelCost() );
        }
    }
    
    public static class Armor extends Config.AbstractCategory {
        
        public final BooleanField enabled;
        
        public final BooleanField disableArmor;
        public final BooleanField hideArmorBar;
        
        public final DoubleField armorMultiplier;
        public final DoubleField armorRecovery;
        public final DoubleField armorToughnessMultiplier;
        public final DoubleField armorToughnessRecovery;
        
        public final BooleanField durabilityFriendly;
        public final DoubleField durabilityMultiplier;
        public final DoubleField durabilityThreshold;
        public final EnumField<HeartManager.EnumDurabilityTrigger> durabilityTrigger;
        
        Armor( ToastConfigSpec parent ) {
            super( parent, "armor",
                    "Options that relate to armor and the replacement of armor with absorption (yellow hearts).",
                    "All features in this section are disabled by default by one master toggle. Take care to go through",
                    "this entire category if enabled, as the default options may be considered extreme." );
            
            enabled = SPEC.define( new BooleanField( "enable_section", false,
                    "Set this to true to enable this entire config category. Be warned, the default settings make",
                    "extreme changes to vanilla mechanics." ) );
            
            SPEC.newLine();
            
            disableArmor = SPEC.define( new BooleanField( "disable_armor_damage_reduction", true,
                    "If true, armor will not reduce any damage taken. Only applies to players." ) );
            hideArmorBar = SPEC.define( new BooleanField( "hide_armor_bar", true,
                    "If true, the (perhaps now much less useful) armor bar will not be rendered." ) );
            
            SPEC.newLine();
            
            armorMultiplier = SPEC.define( new DoubleField( "absorption_multiplier", 1.0, DoubleField.Range.NON_NEGATIVE,
                    "The amount of maximum absorption granted for each armor point (in hearts/shirt)." ) );
            armorRecovery = SPEC.define( new DoubleField( "absorption_recovery", 0.0, DoubleField.Range.NON_NEGATIVE,
                    "The increase in absorption recovery rate for each point of armor (per half-shirt)." ) );
            armorToughnessMultiplier = SPEC.define( new DoubleField( "toughness_absorption_multiplier", 0.0, DoubleField.Range.NON_NEGATIVE,
                    "The amount of maximum absorption granted for each armor toughness point (in hearts/shirt).",
                    "For reference, the maximum attainable toughness in vanilla is 12 (full netherite armor)." ) );
            armorToughnessRecovery = SPEC.define( new DoubleField( "toughness_recovery", 0.05, DoubleField.Range.NON_NEGATIVE,
                    "The increase in absorption recovery rate for each point of armor toughness." ) );
            
            SPEC.newLine();
            
            durabilityFriendly = SPEC.define( new BooleanField( "durability.friendly", true,
                    "If true, armor will only take durability damage based on damage dealt to absorption (yellow hearts)." ) );
            durabilityMultiplier = SPEC.define( new DoubleField( "durability.damage_multiplier", 2.0, DoubleField.Range.NON_NEGATIVE,
                    "The multiplier applied to armor durability damage." ) );
            durabilityThreshold = SPEC.define( new DoubleField( "durability.threshold", 1.0, DoubleField.Range.NON_NEGATIVE,
                    "Damage less than or equal to this threshold will not degrade armor durability." ) );
            durabilityTrigger = SPEC.define( new EnumField<>( "durability.trigger", HeartManager.EnumDurabilityTrigger.ALL,
                    "Decide which damage sources can inflict durability damage.",
                    "  all  - all damage except thorns",
                    "  hits - all damage except thorns and damage-over-time (poison, burning, cactus, etc.)",
                    "  none - no damage hurts armor" ) );
        }
    }
}